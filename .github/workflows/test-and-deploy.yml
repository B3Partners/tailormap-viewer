name: 'Test and deploy'

env: # Keep this in sync with Dockerfile version
  NODE_VERSION: "18.14.1"

on:
  push:
    branches: [ main ]
  pull_request:
    types: [ opened, synchronize ]
  workflow_dispatch:

jobs:
  lint:
    name: 'Lint'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 'Install'
        run: npm install

      - name: 'Lint'
        run: npm run lint


  test:
    name: 'Test'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 'Install'
        run: npm install

      - name: 'Test'
        run: npm run test:ci

      - name: 'Publish test results'
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: junit.xml
          check_name: "Unit Test Results"
          comment_title: "Unit Test Results"

      - name: 'Upload coverage to Codecov'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: coverage
          flags: unittests


  build:
    name: 'Build and deploy'
    runs-on: ubuntu-22.04
    env:
      VERSION: snapshot
      COMPOSE_PROJECT_NAME: tailormap-snapshot
      COMPOSE_FILE: docker-compose.yml:docker-compose.traefik.yml:ci/docker-compose.snapshot.yml
      BASE_HREF: /
      HOST: ${{ secrets.DEPLOY_HOST_SNAPSHOT }}
      API_SENTRY_DSN: ${{ secrets.API_SENTRY_DSN }}
      VIEWER_SENTRY_DSN: ${{ secrets.VIEWER_SENTRY_DSN }}
    needs: [ lint, test ]
    steps:
      - uses: actions/checkout@v3
        with:
          # If tags aren't fetched the bin/prebuild.js script will leave fields in generated/version.json empty
          # https://github.com/actions/checkout/issues/701
          fetch-depth: 0
      - name: 'GitHub Slug Action'
        uses: rlespinasse/github-slug-action@v4

      - name: 'Find Current Pull Request'
        uses: jwalton/gh-find-current-pr@v1
        id: find-pr

      - name: 'Set variables for PR'
        # When running on a PR, build and tag the Docker image for a deployment with a different base-href and a static-only deployment on
        # a path prefix, with the frontend using the /api URL from the main branch deployment.
        if: ${{ success() && steps.find-pr.outputs.number }}
        env:
          PR: ${{ steps.find-pr.outputs.number }}
        run: |
          echo "VERSION=pr-${PR}" >> $GITHUB_ENV
          echo "COMPOSE_PROJECT_NAME=tailormap-pr-${PR}" >> $GITHUB_ENV
          echo "COMPOSE_FILE=docker-compose.yml:docker-compose.traefik.yml:ci/docker-compose.pr.yml" >> $GITHUB_ENV
          echo "BASE_HREF=/pull-request/${PR}/${GITHUB_REF_NAME_SLUG_URL}/" >> $GITHUB_ENV

      - name: 'Log in to GitHub container registry'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Build, tag and push image to registry'
        # Always uses the 'snapshot' tag of the tailormap-api base image by setting the API_VERSION build arg
        run: |
          docker buildx create --use --name tailormap-builder
          docker run --privileged --rm tonistiigi/binfmt --install all
          docker buildx build --progress plain --pull --build-arg VERSION=${VERSION} --build-arg API_VERSION=snapshot --build-arg BASE_HREF=${BASE_HREF} --platform linux/amd64,linux/arm64 -t ghcr.io/b3partners/tailormap:${VERSION} . --push

      - name: 'Set Docker context for deployment'
        uses: arwynfr/actions-docker-context@v2
        with:
          docker_host: ${{ secrets.DOCKER_HOST_SNAPSHOT }}
          context_name: 'dev-server'
          ssh_cert: ${{ secrets.DOCKER_HOST_SNAPSHOT_SSH_CERT }}
          ssh_key: ${{ secrets.DOCKER_HOST_SNAPSHOT_SSH_KEY }}
          use_context: true

      - name: 'Add known hosts'
        run: |
          ssh-keyscan -H ${{ secrets.DOCKER_HOSTNAME }} > $HOME/.ssh/known_hosts

      - name: 'Update deployment using Docker Compose'
        # use the old/python docker-compose for pulling to prevent errors like https://github.com/docker/buildx/issues/764
        # WARNING: Some service image(s) must be built from source by running:
        #    docker compose build %s db web-proxied
        # error during connect: Post "http://docker.example.com/v1.41/images/create?fromImage=nginx%2Fnginx-prometheus-exporter&tag=0.10.0":
        # command [ssh -l github-docker-actions -- *** docker system dial-stdio] has exited with signal: killed, please make sure the URL is valid, and Docker 18.09 or later is installed on the remote host: stderr=
        run: |
          docker-compose pull -q
          docker compose up -d --pull=always

      - name: 'Create GitHub deployment'
        if: success()
        uses: chrnorm/deployment-action@v2
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          environment-url: "https://${{ secrets.DEPLOY_HOST_SNAPSHOT }}${{ env.BASE_HREF}}"
          description: "Deployment for ${{ env.VERSION }}"
          environment: ${{ env.VERSION }}
          initial-status: success
          ref: "${{ env.GITHUB_HEAD_REF }}"

  dependency-review:
    name: 'Dependency Review'
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v3

      - uses: actions/dependency-review-action@v3
        with:
          deny-licenses: GPL-2.0+, AGPL-3.0+

  cyclonedx:
    name: 'CycloneDX'
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
    if: ${{ github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm install

      - name: 'Create SBOM with CycloneDX'
        uses: CycloneDX/gh-node-module-generatebom@v1

      - name: 'Deploy SBOM'
        uses: DependencyTrack/gh-upload-sbom@master
        with:
          serverhostname: ${{ secrets.DEPENDENCY_TRACK_HOSTNAME }}
          apikey: ${{ secrets.DEPENDENCY_TRACK_APIKEY }}
          project: 'e63f997e-e070-423b-afc0-8ab704e14abf'
          bomfilename: 'bom.xml'
